<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OS on Hugo Theme Dream</title>
    <link>http://localhost:1313/categories/os/</link>
    <description>Recent content in OS on Hugo Theme Dream</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Oct 2024 11:28:34 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>零拷贝</title>
      <link>http://localhost:1313/posts/zero-copy/</link>
      <pubDate>Sat, 19 Oct 2024 11:28:34 +0000</pubDate>
      <guid>http://localhost:1313/posts/zero-copy/</guid>
      <description>&lt;p&gt;从用户进程缓冲区到内核缓冲区，需要1次系统调用（2次上下文切换），反之亦然。最初外部设备到内核缓冲区也需要CPU亲力亲为，但是磁盘速度太慢了，对CPU是一种极大的浪费，于是有了DMA（Direct Memory Access）直接内存访问技术，将CPU解放出来。&lt;/p&gt;&#xA;&lt;h3 id=&#34;没有dma之前&#34;&gt;没有DMA之前&lt;/h3&gt;&#xA;&lt;p&gt;没有DMA技术之前，IO过程是这样的：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU发出对应的指令给磁盘控制器&lt;/li&gt;&#xA;&lt;li&gt;磁盘控制器把数据放入到内部缓冲区&lt;/li&gt;&#xA;&lt;li&gt;CPU收到中断信号后将数据从磁盘控制器缓冲区拷贝到PageCache&lt;/li&gt;&#xA;&lt;li&gt;再将数据从PageCache拷贝到用户进程缓冲区&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;dma&#34;&gt;DMA&lt;/h3&gt;&#xA;&lt;p&gt;直接内存访问(Direct Memory Access)：在进行IO设备和内存的数据传输的时候，数据搬运的工作全部交给DMA控制器，即DMA负责将数据从磁盘控制器缓冲区拷贝到内核缓冲区。&lt;/p&gt;&#xA;&lt;h3 id=&#34;传统的文件传输&#34;&gt;传统的文件传输&lt;/h3&gt;&#xA;&lt;p&gt;数据读取和写入是从用户空间到内核空间来回复制，而内核空间的数据是通过操作系统层面的IO接口从磁盘读取或写入。一般会需要两个系统调用：&#xA;&lt;code&gt;read(file, tmp_buf, len)&lt;/code&gt;和&lt;code&gt;write(socket, tmp_buf, len)&lt;/code&gt;&#xA;这个过程发生了4次用户态与内核态的上下文切换，还发生了4次数据拷贝。&lt;/p&gt;&#xA;&lt;h3 id=&#34;零拷贝&#34;&gt;零拷贝&lt;/h3&gt;&#xA;&lt;h5 id=&#34;mmapwrite&#34;&gt;mmap+write&lt;/h5&gt;&#xA;&lt;p&gt;用&lt;code&gt;mmap()&lt;/code&gt;替换&lt;code&gt;read()&lt;/code&gt;系统调用函数，&lt;code&gt;mmap()&lt;/code&gt;会直接把内核缓冲区里的数据「映射」到用户空间，这样就减少了一次数据拷贝。&lt;/p&gt;&#xA;&lt;h5 id=&#34;sendfile&#34;&gt;sendfile&lt;/h5&gt;&#xA;&lt;p&gt;Linux2.1提供了一个专门发送文件的系统调用函数&lt;code&gt;sendfile()&lt;/code&gt;，可以直接把内核缓冲区里的数据拷贝到socket缓冲区里，这样只要一次系统调用。&lt;/p&gt;&#xA;&lt;h5 id=&#34;sg-dma&#34;&gt;SG-DMA&lt;/h5&gt;&#xA;&lt;p&gt;如果网卡支持SG-DMA(The Scatter-Gather Direct Memory Access)技术，缓冲区描述符和数据长度传到socket缓冲区，这样网卡的SG-DMA控制器就可以直接将内核缓冲区的数据拷贝到网卡到缓冲区里。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Process&amp;Thread</title>
      <link>http://localhost:1313/posts/process-thread/</link>
      <pubDate>Fri, 18 Oct 2024 21:20:26 +0000</pubDate>
      <guid>http://localhost:1313/posts/process-thread/</guid>
      <description>&lt;h1 id=&#34;进程&#34;&gt;进程&lt;/h1&gt;&#xA;&lt;p&gt;运行、就绪、阻塞&lt;/p&gt;&#xA;&lt;h3 id=&#34;进程的控制结构&#34;&gt;进程的控制结构&lt;/h3&gt;&#xA;&lt;p&gt;操作系统中，用进程控制块(process control block, PCB)数据结构来描述进程。&lt;/p&gt;&#xA;&lt;h3 id=&#34;唤醒进程&#34;&gt;唤醒进程&lt;/h3&gt;&#xA;&lt;p&gt;进程由「运行」转变为「阻塞」状态是由于进程必须等待某一事件的完成，所以处于阻塞状态的进程绝对不可能叫醒自己。只有当该进程所期待的事件出现时，才由发现者进程用唤醒语句叫醒它。&lt;/p&gt;&#xA;&lt;h3 id=&#34;进程上下文切换&#34;&gt;进程上下文切换&lt;/h3&gt;&#xA;&lt;p&gt;进程由内核管理和调度，所以进程的切换只能发生在内核态。包括虚拟内存、栈、全局变量等用户空间的资源，以及内核堆栈、寄存器等内核空间的资源。&lt;/p&gt;&#xA;&lt;h1 id=&#34;线程&#34;&gt;线程&lt;/h1&gt;&#xA;&lt;p&gt;线程是进程当中的一条执行流程。每个线程各自都有一套独立的寄存器和栈。&lt;/p&gt;&#xA;&lt;h3 id=&#34;线程vs进程&#34;&gt;线程vs.进程&lt;/h3&gt;&#xA;&lt;p&gt;进程是资源分配的单位，线程是CPU调度的单位。线程独享的资源更少，如寄存器和栈。同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间(虚拟内存共享)，这意味着同一个进程的线程都具有同一个页表，对于进程之间的切换，页表的切换开销是比较大的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;线程上下文切换&#34;&gt;线程上下文切换&lt;/h3&gt;&#xA;&lt;p&gt;当两个线程属于同一个进程，因为虚拟内存是共享的，所以在切换时，只需要切换线程的私有数据、寄存器等不共享的数据。&lt;/p&gt;&#xA;&lt;h3 id=&#34;用户线程&#34;&gt;用户线程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;优点：用户线程的切换由线程库函数完成，无需用户态与内核态的切换，速度特别快。&lt;/li&gt;&#xA;&lt;li&gt;缺点：如果一个线程发起系统调用而阻塞，那进程所包含的用户线程都不能执行了；由于时间片分配给进程，故与其他进程比，每个线程得到的时间片较少。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;内核线程&#34;&gt;内核线程&lt;/h3&gt;&#xA;&lt;p&gt;与用户线程相反，如果某个内核线程发起系统调用而阻塞，并不会影响其他内核线程的运行。但由于线程的创建、终止和切换都是通过系统调用来进行的，所以系统开销较大。&lt;/p&gt;&#xA;&lt;h1 id=&#34;调度算法&#34;&gt;调度算法&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;先来先服务（长作业有利，适合CPU繁忙型作业）&lt;/li&gt;&#xA;&lt;li&gt;最短作业优先（提高吞吐量）&lt;/li&gt;&#xA;&lt;li&gt;高响应比优先（优先权 = （等待时间+要求服务时间）/要求服务时间）&lt;/li&gt;&#xA;&lt;li&gt;时间片轮转调度算法（20ms-50ms）&lt;/li&gt;&#xA;&lt;li&gt;最高优先级调度&lt;/li&gt;&#xA;&lt;li&gt;多级反馈队列调度：每个队列优先级从高到低，同时优先级越高时间片越短。对于短作业可能在第一级队列很快被处理完，对于长作业，可以移入优先级更高的队列等待，兼顾了长短作业，同时有较好的响应时间。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Process Communication</title>
      <link>http://localhost:1313/posts/process-communication/</link>
      <pubDate>Fri, 18 Oct 2024 21:20:13 +0000</pubDate>
      <guid>http://localhost:1313/posts/process-communication/</guid>
      <description>&lt;h3 id=&#34;管道&#34;&gt;管道&lt;/h3&gt;&#xA;&lt;p&gt;管道就是内核中的一串缓存，从管道的一端写入的数据，从另一端读取，通信数据都遵循先进先出原则。通信效率较低，不适合进程间频繁地交换数据。&lt;/p&gt;&#xA;&lt;p&gt;匿名管道的创建就是返回两个文件描述符，一个读，一个写。父子进程的通信可以通过管道，因为使用&lt;code&gt;fork&lt;/code&gt;创建的子进程会复制父进程的文件描述符。&lt;/p&gt;&#xA;&lt;p&gt;对于命名管道，它在不相关的进程间也能通信，提前创建一个类型为管道的设备文件，进程只要使用这个设备文件，就可以相互通信。&lt;/p&gt;&#xA;&lt;h3 id=&#34;消息队列&#34;&gt;消息队列&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;消息队列是保存在内核中的消息链表。&lt;/li&gt;&#xA;&lt;li&gt;通信不及时，附件也有大小限制。&lt;/li&gt;&#xA;&lt;li&gt;不适合比较大数据的传输。&lt;/li&gt;&#xA;&lt;li&gt;通信过程中，存在用户态与内核态之间的数据拷贝开销。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;共享内存&#34;&gt;共享内存&lt;/h3&gt;&#xA;&lt;p&gt;每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中。&lt;/p&gt;&#xA;&lt;p&gt;为了防止多进程竞争共享资源，需要信号量来进行同步。信号量其实是一个整型的计数器，用于实现进程间的互斥与同步。&lt;/p&gt;&#xA;&lt;h3 id=&#34;信号&#34;&gt;信号&lt;/h3&gt;&#xA;&lt;p&gt;对于异常情况下的工作模式，需要用「信号」的方式来通知进程。Linux中，为了响应各种事件，提供了几十种信号分别代表不同的意义。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
