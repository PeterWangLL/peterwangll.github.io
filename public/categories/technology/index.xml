<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology on PeterWang&#39;s Blog</title>
    <link>http://localhost:1313/categories/technology/</link>
    <description>Recent content in Technology on PeterWang&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/technology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo搭建博客&amp;Home Page设计</title>
      <link>http://localhost:1313/posts/problem-solving/blog-buildpage-design/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/problem-solving/blog-buildpage-design/</guid>
      <description>&lt;h3 id=&#34;博客搭建&#34;&gt;博客搭建&lt;/h3&gt;&#xA;&lt;p&gt;之前博客是使用Hexo搭建的，比较普通，正好听说了Hugo，就来试试。&lt;/p&gt;&#xA;&lt;h3 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h3&gt;&#xA;&lt;p&gt;根据Hugo官方文档的&lt;a herf=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Quick Start&lt;/a&gt;有一个大概了解，选择一个喜欢的主题，我选择的是&lt;a herf=&#34;https://g1en.site/hugo-theme-dream&#34;&gt;Dream&lt;/a&gt;，文档写的很详细。&lt;/p&gt;&#xA;&lt;p&gt;下载dream主题放到themes文件夹下，修改hugo.toml文件，添加theme = &amp;ldquo;dream&amp;rdquo;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;hugo server&lt;/code&gt;启动本地服务调试，然后&lt;code&gt;hugo&lt;/code&gt;生成到&lt;code&gt;public&lt;/code&gt;文件夹下，再&lt;code&gt;push&lt;/code&gt;到&lt;code&gt;GitHub&lt;/code&gt;上，通过&lt;code&gt;GitHub Pages&lt;/code&gt;部署。&lt;/p&gt;&#xA;&lt;h3 id=&#34;tips&#34;&gt;Tips&lt;/h3&gt;&#xA;&lt;p&gt;图片统一放到public/img下，然后在文章中使用cover = /img/pic.jpg来引用，&lt;a href=&#34;https://pixabay.com&#34;&gt;素材&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;my-config&#34;&gt;My Config&lt;/h3&gt;&#xA;&lt;p&gt;文章写在content/posts文件夹下，可以再通过文件夹分类，我是根据categories分类的，这是我每篇文章的开头设置：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title: Hugo搭建博客&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: 2024-10-27 ｜ 我不喜欢精确到秒，所以就只精确到天&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;categories:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  - Technology&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tags:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  - Atag ｜ tags可以有多个&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  - Btag&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nolastmod: true ｜ 不显示更新时间&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cover: /img/pic-22.jpg ｜ 封面图片，这里的路径是public下的img&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是我的hugo.toml文件：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;baseurl = &amp;#34;https://peterwangll.github.io/&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;defaultContentLanguage = &amp;#34;en&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;languageCode = &amp;#34;en&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title = &amp;#34;PeterWang&amp;#39;s Blog&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;theme = &amp;#34;dream&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[params]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;zenMode = true | dream有两种模式，default和zen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lightTheme = &amp;#34;emerald&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;darkTheme = &amp;#34;forest&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;author = &amp;#34;Peter Wang&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;description = &amp;#34;an interesting soul&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;avatar = &amp;#34;img/avator.jpg&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;headerTitle = &amp;#34;PeterWang&amp;#39;s Blog&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;motto = &amp;#34;No time to sorrow, we&amp;#39;re building tomorrow&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;footerBottomText = &amp;#34;&amp;#34; | 默认是powered by hugo。。。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;直接在这里填的话文字没有效果，可以全局搜powered by。。然后改源码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;email = &amp;#34;18136892032@163.com&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;siteStartYear = 2024&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Syntax highlighting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customSyntaxHighlighting = true | 语法高亮，文档讲的很详细，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;需要下载css到hugo的assets/css下，而不是dream的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;noDefaultSummaryCover = true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;showTableOfContents = true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# showSummaryCoverInPost = true ｜ 在文章最上方显示图片&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;showPrevNextPost = true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[markup]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[markup.goldmark]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[markup.goldmark.renderer]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;unsafe = true ｜ hugo的bug，设置后可以在markdown中加载html标签&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[markup.highlight]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;noClasses = false ｜ 语法高亮设置&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;home-page-design&#34;&gt;Home Page Design&lt;/h3&gt;&#xA;&lt;p&gt;通过&lt;a herf=&#34;https://github.com/abhisheknaiidu/awesome-github-profile-readme?tab=readme-ov-file&#34;&gt;awesome-github-profile-readme&lt;/a&gt;收集的别人的主页，寻找灵感，我的主页设计主要参考了以下两位大佬：&lt;a herf=&#34;https://github.com/thmsgbrt/thmsgbrt?tab=readme-ov-file#things-i-code-with&#34;&gt;thmsgbrt&lt;/a&gt;和&lt;a herf=&#34;https://github.com/SP-XD/SP-XD?tab=readme-ov-file&#34;&gt;SP-XD&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>零拷贝</title>
      <link>http://localhost:1313/posts/operating-system/zero-copy/</link>
      <pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/operating-system/zero-copy/</guid>
      <description>&lt;p&gt;从用户进程缓冲区到内核缓冲区，需要1次系统调用（2次上下文切换），反之亦然。最初外部设备到内核缓冲区也需要CPU亲力亲为，但是磁盘速度太慢了，对CPU是一种极大的浪费，于是有了DMA（Direct Memory Access）直接内存访问技术，将CPU解放出来。&lt;/p&gt;&#xA;&lt;h3 id=&#34;没有dma之前&#34;&gt;没有DMA之前&lt;/h3&gt;&#xA;&lt;p&gt;没有DMA技术之前，IO过程是这样的：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU发出对应的指令给磁盘控制器&lt;/li&gt;&#xA;&lt;li&gt;磁盘控制器把数据放入到内部缓冲区&lt;/li&gt;&#xA;&lt;li&gt;CPU收到中断信号后将数据从磁盘控制器缓冲区拷贝到PageCache&lt;/li&gt;&#xA;&lt;li&gt;再将数据从PageCache拷贝到用户进程缓冲区&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;dma&#34;&gt;DMA&lt;/h3&gt;&#xA;&lt;p&gt;直接内存访问(Direct Memory Access)：在进行IO设备和内存的数据传输的时候，数据搬运的工作全部交给DMA控制器，即DMA负责将数据从磁盘控制器缓冲区拷贝到内核缓冲区。&lt;/p&gt;&#xA;&lt;h3 id=&#34;传统的文件传输&#34;&gt;传统的文件传输&lt;/h3&gt;&#xA;&lt;p&gt;数据读取和写入是从用户空间到内核空间来回复制，而内核空间的数据是通过操作系统层面的IO接口从磁盘读取或写入。一般会需要两个系统调用：&#xA;&lt;code&gt;read(file, tmp_buf, len)&lt;/code&gt;和&lt;code&gt;write(socket, tmp_buf, len)&lt;/code&gt;&#xA;这个过程发生了4次用户态与内核态的上下文切换，还发生了4次数据拷贝。&lt;/p&gt;&#xA;&lt;h3 id=&#34;零拷贝&#34;&gt;零拷贝&lt;/h3&gt;&#xA;&lt;h5 id=&#34;mmapwrite&#34;&gt;mmap+write&lt;/h5&gt;&#xA;&lt;p&gt;用&lt;code&gt;mmap()&lt;/code&gt;替换&lt;code&gt;read()&lt;/code&gt;系统调用函数，&lt;code&gt;mmap()&lt;/code&gt;会直接把内核缓冲区里的数据「映射」到用户空间，这样就减少了一次数据拷贝。&lt;/p&gt;&#xA;&lt;h5 id=&#34;sendfile&#34;&gt;sendfile&lt;/h5&gt;&#xA;&lt;p&gt;Linux2.1提供了一个专门发送文件的系统调用函数&lt;code&gt;sendfile()&lt;/code&gt;，可以直接把内核缓冲区里的数据拷贝到socket缓冲区里，这样只要一次系统调用。&lt;/p&gt;&#xA;&lt;h5 id=&#34;sg-dma&#34;&gt;SG-DMA&lt;/h5&gt;&#xA;&lt;p&gt;如果网卡支持SG-DMA(The Scatter-Gather Direct Memory Access)技术，缓冲区描述符和数据长度传到socket缓冲区，这样网卡的SG-DMA控制器就可以直接将内核缓冲区的数据拷贝到网卡到缓冲区里。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Process Communication</title>
      <link>http://localhost:1313/posts/operating-system/process-communication/</link>
      <pubDate>Fri, 18 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/operating-system/process-communication/</guid>
      <description>&lt;h3 id=&#34;管道&#34;&gt;管道&lt;/h3&gt;&#xA;&lt;p&gt;管道就是内核中的一串缓存，从管道的一端写入的数据，从另一端读取，通信数据都遵循先进先出原则。通信效率较低，不适合进程间频繁地交换数据。&lt;/p&gt;&#xA;&lt;p&gt;匿名管道的创建就是返回两个文件描述符，一个读，一个写。父子进程的通信可以通过管道，因为使用&lt;code&gt;fork&lt;/code&gt;创建的子进程会复制父进程的文件描述符。&lt;/p&gt;&#xA;&lt;p&gt;对于命名管道，它在不相关的进程间也能通信，提前创建一个类型为管道的设备文件，进程只要使用这个设备文件，就可以相互通信。&lt;/p&gt;&#xA;&lt;h3 id=&#34;消息队列&#34;&gt;消息队列&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;消息队列是保存在内核中的消息链表。&lt;/li&gt;&#xA;&lt;li&gt;通信不及时，附件也有大小限制。&lt;/li&gt;&#xA;&lt;li&gt;不适合比较大数据的传输。&lt;/li&gt;&#xA;&lt;li&gt;通信过程中，存在用户态与内核态之间的数据拷贝开销。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;共享内存&#34;&gt;共享内存&lt;/h3&gt;&#xA;&lt;p&gt;每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中。&lt;/p&gt;&#xA;&lt;p&gt;为了防止多进程竞争共享资源，需要信号量来进行同步。信号量其实是一个整型的计数器，用于实现进程间的互斥与同步。&lt;/p&gt;&#xA;&lt;h3 id=&#34;信号&#34;&gt;信号&lt;/h3&gt;&#xA;&lt;p&gt;对于异常情况下的工作模式，需要用「信号」的方式来通知进程。Linux中，为了响应各种事件，提供了几十种信号分别代表不同的意义。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Process&amp;Thread</title>
      <link>http://localhost:1313/posts/operating-system/process-thread/</link>
      <pubDate>Fri, 18 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/operating-system/process-thread/</guid>
      <description>&lt;h1 id=&#34;进程&#34;&gt;进程&lt;/h1&gt;&#xA;&lt;p&gt;运行、就绪、阻塞&lt;/p&gt;&#xA;&lt;h3 id=&#34;进程的控制结构&#34;&gt;进程的控制结构&lt;/h3&gt;&#xA;&lt;p&gt;操作系统中，用进程控制块(process control block, PCB)数据结构来描述进程。&lt;/p&gt;&#xA;&lt;h3 id=&#34;唤醒进程&#34;&gt;唤醒进程&lt;/h3&gt;&#xA;&lt;p&gt;进程由「运行」转变为「阻塞」状态是由于进程必须等待某一事件的完成，所以处于阻塞状态的进程绝对不可能叫醒自己。只有当该进程所期待的事件出现时，才由发现者进程用唤醒语句叫醒它。&lt;/p&gt;&#xA;&lt;h3 id=&#34;进程上下文切换&#34;&gt;进程上下文切换&lt;/h3&gt;&#xA;&lt;p&gt;进程由内核管理和调度，所以进程的切换只能发生在内核态。包括虚拟内存、栈、全局变量等用户空间的资源，以及内核堆栈、寄存器等内核空间的资源。&lt;/p&gt;&#xA;&lt;h1 id=&#34;线程&#34;&gt;线程&lt;/h1&gt;&#xA;&lt;p&gt;线程是进程当中的一条执行流程。每个线程各自都有一套独立的寄存器和栈。&lt;/p&gt;&#xA;&lt;h3 id=&#34;线程vs进程&#34;&gt;线程vs.进程&lt;/h3&gt;&#xA;&lt;p&gt;进程是资源分配的单位，线程是CPU调度的单位。线程独享的资源更少，如寄存器和栈。同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间(虚拟内存共享)，这意味着同一个进程的线程都具有同一个页表，对于进程之间的切换，页表的切换开销是比较大的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;线程上下文切换&#34;&gt;线程上下文切换&lt;/h3&gt;&#xA;&lt;p&gt;当两个线程属于同一个进程，因为虚拟内存是共享的，所以在切换时，只需要切换线程的私有数据、寄存器等不共享的数据。&lt;/p&gt;&#xA;&lt;h3 id=&#34;用户线程&#34;&gt;用户线程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;优点：用户线程的切换由线程库函数完成，无需用户态与内核态的切换，速度特别快。&lt;/li&gt;&#xA;&lt;li&gt;缺点：如果一个线程发起系统调用而阻塞，那进程所包含的用户线程都不能执行了；由于时间片分配给进程，故与其他进程比，每个线程得到的时间片较少。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;内核线程&#34;&gt;内核线程&lt;/h3&gt;&#xA;&lt;p&gt;与用户线程相反，如果某个内核线程发起系统调用而阻塞，并不会影响其他内核线程的运行。但由于线程的创建、终止和切换都是通过系统调用来进行的，所以系统开销较大。&lt;/p&gt;&#xA;&lt;h1 id=&#34;调度算法&#34;&gt;调度算法&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;先来先服务（长作业有利，适合CPU繁忙型作业）&lt;/li&gt;&#xA;&lt;li&gt;最短作业优先（提高吞吐量）&lt;/li&gt;&#xA;&lt;li&gt;高响应比优先（优先权 = （等待时间+要求服务时间）/要求服务时间）&lt;/li&gt;&#xA;&lt;li&gt;时间片轮转调度算法（20ms-50ms）&lt;/li&gt;&#xA;&lt;li&gt;最高优先级调度&lt;/li&gt;&#xA;&lt;li&gt;多级反馈队列调度：每个队列优先级从高到低，同时优先级越高时间片越短。对于短作业可能在第一级队列很快被处理完，对于长作业，可以移入优先级更高的队列等待，兼顾了长短作业，同时有较好的响应时间。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Redis发布订阅</title>
      <link>http://localhost:1313/posts/redis/redis-2/</link>
      <pubDate>Fri, 18 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/redis/redis-2/</guid>
      <description>&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;&#xA;&lt;p&gt;Redis通过&lt;code&gt;SUBSCRIBE&lt;/code&gt;和&lt;code&gt;PUBLISH&lt;/code&gt;实现发布订阅。主要由三部分组成：「Subscriber」、「Publisher」、「Channel」。通过Pattern模式可以实现订阅多个前缀相同的频道。&lt;/p&gt;&#xA;&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;&#xA;&lt;p&gt;Redis使用pubsub_channels字典来保存订阅频道的信息(value是一个链表)&lt;/p&gt;&#xA;&lt;h3 id=&#34;缺点&#34;&gt;缺点&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;发布的消息并不会持久化，消息发布之后新订阅的客户端只能接收后续发布到该频道的消息。&lt;/li&gt;&#xA;&lt;li&gt;不支持ACK机制，无法保证消息的可靠性。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Limit&amp;Offset——分页慢查询优化</title>
      <link>http://localhost:1313/posts/mysql/mysql-3/</link>
      <pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/mysql/mysql-3/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OFFSET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面两种写法都表示取第2,3,4三条数据。&lt;/p&gt;&#xA;&lt;p&gt;limit的偏移量越大，执行时间越长。&lt;/p&gt;&#xA;&lt;h3 id=&#34;原因分析&#34;&gt;原因分析&lt;/h3&gt;&#xA;&lt;p&gt;eg. user表有id,name,sex,age字段，其中id为主键，age为普通索引。当执行&lt;code&gt;select * from user where age &amp;gt; 10 limit 1000000,10&lt;/code&gt;时：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;首先SQL的执行顺序是：from-&amp;gt;join-&amp;gt;where-&amp;gt;group by-&amp;gt;having-&amp;gt;select-&amp;gt;distinct-&amp;gt;order by-&amp;gt;limit.&lt;/li&gt;&#xA;&lt;li&gt;由于age是普通索引，而select的是*，所以需要回表。&lt;/li&gt;&#xA;&lt;li&gt;limit是在最后执行的，所以需要进行1000010次回表，然后把前1000000条数据抛弃，取后10条数据。&#xA;由此可见造成上述情况的罪魁祸首是&lt;code&gt;回表&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;可以通过子查询或覆盖索引来减少回表，根据业务来决定。&lt;/li&gt;&#xA;&lt;li&gt;order by和limit结合使用。&lt;/li&gt;&#xA;&lt;li&gt;主键直接定位(ID需有序)，分步查询/程序记录上一页最大主键ID。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Network-Knowledge-TCP</title>
      <link>http://localhost:1313/posts/network/network-knowledge-1/</link>
      <pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/network/network-knowledge-1/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a Q&amp;amp;A about TCP.&lt;/p&gt;&#xA;&lt;h3 id=&#34;什么是tcp&#34;&gt;什么是TCP&lt;/h3&gt;&#xA;&lt;p&gt;TCP是一个工作在传输层的可靠数据传输的服务，它确保接受端接受端网络包是无损坏、无间隔、非冗余和按序的。&lt;/p&gt;&#xA;&lt;p&gt;TCP是面向连接的、可靠的、基于字节流的传输层通信协议。基于字节流导致了TCP会有粘包和半包的问题。Nagle算法为了提高网络传输效率，会将多个小的数据包合并发送。&lt;/p&gt;&#xA;&lt;p&gt;HTTP通过&lt;code&gt;\r\n&lt;/code&gt;确定header和body的边界，然后可以通过content-length来确&lt;/p&gt;&#xA;&lt;h3 id=&#34;tcp连接&#34;&gt;TCP连接&lt;/h3&gt;&#xA;&lt;p&gt;用于保证可靠性和流量控制维护的某些状态信息的组合，包括Socket、序列号和窗口大小称为连接。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Socket：由IP地址和端口组成&lt;/li&gt;&#xA;&lt;li&gt;序列号：用来解决乱序问题&lt;/li&gt;&#xA;&lt;li&gt;窗口大小：用来做流量控制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;三次握手&#34;&gt;三次握手&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;第一次握手：SYN=1，随机初始化序号&lt;/li&gt;&#xA;&lt;li&gt;第二次握手：SYN=1，ACK=1，确认序号=第一次握手的序号+1,随机初始化序号&lt;/li&gt;&#xA;&lt;li&gt;第三次握手：ACK=1，确认序号=第二次握手的序号+1&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;为什么是三次握手&#34;&gt;为什么是三次握手&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;避免「历史连接」初始化了连接，如果客户端重启，旧的第二次握手先到，客户端通过上下文比较可以发起RST报文中止连接。如果在两次握手的情况下，服务端没有中间状态给客户端来组织历史连接，导致服务端可能建立一个历史连接，造成资源浪费。&lt;/li&gt;&#xA;&lt;li&gt;同步双方初始序列号，第一、二次握手同步客户端的初始序列号，第二、三次握手同步服务端的初始序列号。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;四次挥手&#34;&gt;四次挥手&lt;/h3&gt;&#xA;&lt;p&gt;每个方向都需要一个FIN和一个ACK，只有主动关闭连接的，才有TIME_WAIT状态。&lt;/p&gt;&#xA;&lt;h3 id=&#34;为什么time_wait等待的时间是2msl&#34;&gt;为什么TIME_WAIT等待的时间是2MSL&lt;/h3&gt;&#xA;&lt;p&gt;MSL是报文最大生存时间，TTL是经过路由跳数，TTL的值一般是64，Linux将MSL设置为30s。2MSL时长是从客户端接受到FIN后发送ACK开始计时的，相当于至少允许报文丢失一次。&lt;/p&gt;&#xA;&lt;h3 id=&#34;为什么需要time_wait状态&#34;&gt;为什么需要TIME_WAIT状态&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;防止历史连接中的数据，被后面相同四元组的连接错误的接收（ISN随机生成也是为了避免这个）&lt;/li&gt;&#xA;&lt;li&gt;保证「被动关闭连接」的一方，能被正确地关闭。&#xA;Tips：如果服务端要避免过多的TIME_WAIT状态的连接，就不要主动断开连接，让客户端去断开，由分布在各处的客户端去承受TIME_WAIT。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Why is Redis so fast?</title>
      <link>http://localhost:1313/posts/redis/redis_1/</link>
      <pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/redis/redis_1/</guid>
      <description>&lt;p&gt;本文会从以手稿+文字的形式说明，仅为个人总结。&#xA;本文会讲述上半部分：包括数据结构、单线程模型、IO多路复用三个方面阐明Redis为什么那么快？&lt;/p&gt;&#xA;&lt;p&gt;首先Redis基于内存存储。这是一个前提，下面会谈到正是基于内存，Redis才会采用某某设计，而不是另外的那些。&lt;/p&gt;&#xA;&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;&#xA;&lt;p&gt;SDS，Dict（Hash），ZipList，SkipList，QuickList，ListPack。&lt;/p&gt;&#xA;&lt;p&gt;SDS详细的可以看&lt;a href=&#34;http://zhangtielei.com/posts/blog-redis-sds.html&#34;&gt;http://zhangtielei.com/posts/blog-redis-sds.html&lt;/a&gt;&lt;br&gt;&#xA;通过header维护了一个len，alloc，flags，buf[]的头信息，len取代了&lt;code&gt;‘\0’&lt;/code&gt;发挥的作用，因此SDS是二进制安全的，获取len复杂度是O(1)的，再因为会在拼接时检查(dsMakeRoomFor)，所以它没有缓冲区溢出的风险。&lt;/p&gt;&#xA;&lt;p&gt;Hash使用拉链法，看过JDK HashMap实现就问题不大。扩容机制不太一样，Dict维护两个Hash表，当触发rehash阈值后，只有对某个桶进行增删改查操作后，才会将该桶对应的key-value迁移到另外一个Hash表中，通过这种渐进式的做法防止一次性rehash带来的阻塞问题。&lt;/p&gt;&#xA;&lt;p&gt;ZipList压缩链表是一种对空间的极致利用，在头里面会存节点熟练，尾部偏移等字段，entry节点有prevlen，encoding和data，prevlen用于记录前一个节点的长度，方便从后向前遍历，成也萧何败也萧何，当插入节点后导致prevlen变化，会发生连锁更新。同样由于自身存储结构限制，压缩链表不能存储太多的元素，在Redis ZSet实现中，当元素个数小于128个并且每个元素的值小于64字节时会使用ZipList。&lt;/p&gt;&#xA;&lt;p&gt;QuickList通过双向链表模式，维护的节点变成了一个个压缩链表，通过控制每个节点压缩链表的大小来规避潜在的连锁更新风险。&lt;/p&gt;&#xA;&lt;p&gt;ListPack重新设计了压缩链表，将prevlen字段去除彻底解决了连锁更新问题，而从后向前遍历的功能没有丢失，详细的算法可以看&lt;a href=&#34;https://github.com/antirez/listpack/blob/master/listpack.c&#34;&gt;https://github.com/antirez/listpack/blob/master/listpack.c&lt;/a&gt;中的IpDecodeBacklen函数。&lt;/p&gt;&#xA;&lt;p&gt;SkipList跳表，层级结构和skipListNode节点如上，通过随机数保持相邻两层节点个数比2:1。&lt;/p&gt;&#xA;&lt;p&gt;会有人拿它和B+Tree比较，InnoDB就是基于B+Tree实现的，它的前提的磁盘，意味要最大限度减少磁盘IO，由此B+Tree矮胖的特点良好的适应了这种需求，而SkipList在相同数据量下明显比B+Tree层数多，Why？上面提到了Redis基于内存这一前提，层数多一些又何妨，况且跳表比B+Tree少了维护树的成本，实现起来也简单，何乐不为呢。&lt;/p&gt;&#xA;&lt;h2 id=&#34;io多路复用&#34;&gt;IO多路复用&lt;/h2&gt;&#xA;&lt;p&gt;从计算机视角看，IO实际上是数据在内存和外部设备（磁盘、网络）之间的流动。&lt;br&gt;&#xA;如果是一次Input，数据会从外部存储流入内核缓冲区（下面统称为A过程），再从内核缓冲区流入用户进程缓冲区（下面统称为B过程），Output相反。&lt;br&gt;&#xA;IO多路复用是对传统NIO模型的改进，BIO对于从A过程是阻塞的状态，而NIO通过轮询的方式查看A过程是否完成，于是IO多路复用更进一步，将这一轮询查看的工作统一交给一个线程去做，从宏观的角度看复用了这条IO。&lt;br&gt;&#xA;于是不得不提到select/epoll，简单来说select就是一个数组轮询，poll用链表替代了数组，本质仍是轮询，epoll通过事件驱动机制进一步提升了效率。Reactor模式就是这种思想。&lt;/p&gt;&#xA;&lt;h2 id=&#34;单线程&#34;&gt;单线程&lt;/h2&gt;&#xA;&lt;p&gt;通过优秀的数据结构，IO多路复用，内存，Redis的高性能瓶颈并非CPU，可能是机器的内存或网络带宽，因此单线程足矣，美中不足无法利用CPU多核优势，可以在一台机器上启动多个节点或采用分片集群的方式。&lt;br&gt;&#xA;Redis6.0引入多线程，目的是处理网络IO，因为随着网络硬件性能的提升，Redis的性能瓶颈有时会出现在网络IO上。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Homebrew启动Mysql踩坑记录</title>
      <link>http://localhost:1313/posts/problem-solving/log_of_install_mysql/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/problem-solving/log_of_install_mysql/</guid>
      <description>&lt;h3 id=&#34;起因&#34;&gt;起因&lt;/h3&gt;&#xA;&lt;p&gt;原来用Homebrew安装过mysql@8.0和@5.7均可使用，一段时间后当我运行&lt;code&gt;brew services run mysql&lt;/code&gt;时仍然会显示成功，但是&lt;code&gt;brew services list&lt;/code&gt;显示的是状态却是&lt;code&gt;stopped&lt;/code&gt;。尝试了重新启动和卸载均无效。&lt;/p&gt;&#xA;&lt;h3 id=&#34;解决&#34;&gt;解决&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;查看日志，在&lt;code&gt;/usr/local/var/mysql/xxx.err&lt;/code&gt;的错误日志文件报错信息为：Failed to find valid data directory.&lt;/li&gt;&#xA;&lt;li&gt;以此为线索查看解决方案：&lt;code&gt;mysqld --initialize&lt;/code&gt;，This shall initialse the data directory in the path where you have installed MySql server.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;command not found: mysqld&lt;/code&gt;，查看mysql安装路径为&lt;code&gt;/usr/local/opt/mysql/bin/&lt;/code&gt;，注意mysql需要加上具体的版本号，比如&lt;code&gt;/usr/local/opt/mysql@8.0/bin/&lt;/code&gt;，发现是有&lt;code&gt;mysqld&lt;/code&gt;的，需要在&lt;code&gt;~/.zshrc&lt;/code&gt;中添加对应的路径。&lt;/li&gt;&#xA;&lt;li&gt;此时重新运行&lt;code&gt;mysqld --initialize&lt;/code&gt;，依然失败，报错信息提示&lt;code&gt;/usr/local/var/mysql&lt;/code&gt;已经存在，使用&lt;code&gt;sudo rm -rf /usr/local/var/mysql&lt;/code&gt;删除后重新执行，成功。&lt;/li&gt;&#xA;&lt;li&gt;记住保存好临时的密码，重新启动mysql服务，成功。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mysql -u root -p&lt;/code&gt;,然后输入刚刚的临时密码，执行&lt;code&gt;ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;newpassword&#39;;&lt;/code&gt;，执行&lt;code&gt;FLUSH PRIVILEGES;&lt;/code&gt;使密码修改生效。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>ThreadLocal</title>
      <link>http://localhost:1313/posts/jdk/jdk-3/</link>
      <pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/jdk/jdk-3/</guid>
      <description>&lt;p&gt;&lt;code&gt;Provide thread-local variables, wish to associate state with a thread(e.g., a user ID or Transaction ID).&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;每个Thread拥有一个ThreadLocalMap，实际是一个&lt;code&gt;Entry[] table&lt;/code&gt;，Entry是一个key-value结构，key是一个弱引用。所以get()或set()时，是通过CurrentThread得到ThreadLocalMap，然后以this为key操作的过程。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WeakReference&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadLocal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先来看下get():&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 拿到对应currentThread的map数组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadLocalMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadLocalMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEntry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 初始化map数组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setInitialValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入getEntry():&lt;/p&gt;</description>
    </item>
    <item>
      <title>AbstractQueuedSynchronizer</title>
      <link>http://localhost:1313/posts/jdk/jdk-1/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/jdk/jdk-1/</guid>
      <description>&lt;p&gt;&lt;code&gt;Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues.&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;该抽象队列同步器通过依赖FIFO的队列同步器来实现阻塞式的锁机制。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;waitStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nextWaiter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上维护了一个共享变量&lt;code&gt;state&lt;/code&gt;和一个双向链表，链表节点除了prev, next, 还有&lt;code&gt;waitStatus&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Status field, taking on only the values:SIGNAL, The successor of this node is (or will soon be) blocked (via park), so the current node must unpark its successor when it releases or cancels.&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ThreadPoolExecutor</title>
      <link>http://localhost:1313/posts/jdk/jdk-2/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/jdk/jdk-2/</guid>
      <description>&lt;h3 id=&#34;runstateworkercount&#34;&gt;runState&amp;amp;workerCount&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;private final AtomicInteger ctl&lt;/code&gt;: the main pool control state, 高3位用来表示线程池的runState，底29位用来表示线程数workCount。这种思想让我联想到了SDS中header的sdshdr5结构，flags低3位保存type，高5位在&lt;code&gt;type=sdshdr5&lt;/code&gt;时表示len。&lt;/p&gt;&#xA;&lt;h3 id=&#34;execute&#34;&gt;execute()&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NullPointerException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;workerCountOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;corePoolSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// try to start a new thread with the given command as its first task&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addWorker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isRunning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;workQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;offer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if a task can be successfully queued, then we still need to double-check whether we should have added a thread&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recheck&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if neccessary roll back the enqueuing if stopped&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isRunning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recheck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// or start a new thread if there are none&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;workerCountOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recheck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addWorker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if we cannot queue task, then we try to add a new thread. If it fails, we know we are shut down or saturated and so reject the task.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addWorker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看出&lt;code&gt;execute()&lt;/code&gt;方法会根据线程池现有的状态来决定&lt;code&gt;addWorker()&lt;/code&gt;or&lt;code&gt;reject()&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multi-Versioned Concurrency Control</title>
      <link>http://localhost:1313/posts/mysql/mysql-2/</link>
      <pubDate>Mon, 09 Sep 2024 17:52:19 +0000</pubDate>
      <guid>http://localhost:1313/posts/mysql/mysql-2/</guid>
      <description>&lt;p&gt;多版本并发控制，在事务开启时，构建Read View——逻辑上的一致性视图。&lt;/p&gt;&#xA;&lt;p&gt;通过行记录上的隐藏字段db_roll_ptr(指向undo)和db_trx_id(对该行记录最后操作的事务ID)，以及在创建事务的那一时刻，未提交但活跃的事务数来实现MVCC。&lt;/p&gt;&#xA;&lt;p&gt;事务创建时只需要新增对应的未提交但活跃的事务数组，最底位、最高位(事务id时递增的)，来实现秒级创建。db_roll_ptr维护了一个undo的链式结构，通过它可以找到对应时刻的行记录。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Overview of MySQL</title>
      <link>http://localhost:1313/posts/mysql/mysql-1/</link>
      <pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/mysql/mysql-1/</guid>
      <description>&lt;p&gt;从一条SQL语句的执行出发&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Server：连接-分析-优化-执行，重点是优化器&lt;/li&gt;&#xA;&lt;li&gt;执行器与InnDB的交互，索引下推&lt;/li&gt;&#xA;&lt;li&gt;B+Tree&lt;/li&gt;&#xA;&lt;li&gt;Buffer Pool&lt;/li&gt;&#xA;&lt;li&gt;log&lt;/li&gt;&#xA;&lt;li&gt;MVCC&lt;/li&gt;&#xA;&lt;li&gt;锁机制&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;从架构的角度看，Server+Engine，Server层看优化器的原理，执行器承担的是调用存储引擎接口，过滤组装的工作。&lt;br&gt;&#xA;由于InnoDB索引存储的特点，MySQL5.6支持索引下推，当命中联合索引时，将筛选过程下推至存储引擎，从而减轻执行器的压力。&lt;br&gt;&#xA;InnoDB对数据的操作都是在Buffer Pool中的，以页为单位与物理磁盘交互，构建出逻辑表空间，当在内存中对数据进行操作前，先记录undo log，完成后记录redo log，bin log，这涉及两阶段提交，当事务提交后，不管修改的页是否刷盘，理论上都能保证能够查到数据，但还要看redo log刷盘策略。&lt;br&gt;&#xA;MVCC的实现基于undo log和行记录的隐藏字段的，通过构建Read View来描述事务可见性。&lt;br&gt;&#xA;在更新或者当前读时，要求数据是最新的，因而需要锁机制：加锁的粒度、S｜X锁、MDL，最终是对索引加锁。&lt;/p&gt;&#xA;&lt;p&gt;这是我目前对MySQL全貌的认识，执行器、InnoDB层面都大量地使用了内存，对于Buffer Pool，redo log等日志分别对应了不同的刷盘策略；从SQL执行的过程来看优化，其实就是通过高效的索引模型，以最精简的结构返回数据，不要粗暴地把事情全部交给MySQL去做。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hexo添加分类不生效</title>
      <link>http://localhost:1313/posts/problem-solving/hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E4%B8%8D%E7%94%9F%E6%95%88/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/problem-solving/hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E4%B8%8D%E7%94%9F%E6%95%88/</guid>
      <description>&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;hexo new page categories&lt;/code&gt;&#xA;生成&lt;code&gt;source/categories/index.md&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;在新生成的index.md中front-matter添加type: categories&lt;/li&gt;&#xA;&lt;li&gt;在_config.yml中开启，搜索menu，去掉categories前的#&lt;/li&gt;&#xA;&lt;li&gt;在博客的front-matter中添加categories: 任意名称&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;next theme已经写好了categories的样式，在配置中去掉#是为了开启它，于是new page必须是categories，来配合配置中的路径，同理在配置中的其他选项如果要用它，也要new对应名称的page，比如tags，就是&lt;code&gt;hexo new page tags&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;每篇博客categories只能有一个，tags可以有多个。&lt;/li&gt;&#xA;&lt;li&gt;我自己在配置的时候使用vscode下的终端运行的hexo command，会出现改完categories后不生效的情况，换成本地终端就解决了，不是很懂。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
