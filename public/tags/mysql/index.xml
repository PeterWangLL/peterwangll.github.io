<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on PeterWang&#39;s Blog</title>
    <link>http://localhost:1313/tags/mysql/</link>
    <description>Recent content in MySQL on PeterWang&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Limit&amp;Offset——分页慢查询优化</title>
      <link>http://localhost:1313/posts/mysql/mysql-3/</link>
      <pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/mysql/mysql-3/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;article&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OFFSET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面两种写法都表示取第2,3,4三条数据。&lt;/p&gt;&#xA;&lt;p&gt;limit的偏移量越大，执行时间越长。&lt;/p&gt;&#xA;&lt;h3 id=&#34;原因分析&#34;&gt;原因分析&lt;/h3&gt;&#xA;&lt;p&gt;eg. user表有id,name,sex,age字段，其中id为主键，age为普通索引。当执行&lt;code&gt;select * from user where age &amp;gt; 10 limit 1000000,10&lt;/code&gt;时：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;首先SQL的执行顺序是：from-&amp;gt;join-&amp;gt;where-&amp;gt;group by-&amp;gt;having-&amp;gt;select-&amp;gt;distinct-&amp;gt;order by-&amp;gt;limit.&lt;/li&gt;&#xA;&lt;li&gt;由于age是普通索引，而select的是*，所以需要回表。&lt;/li&gt;&#xA;&lt;li&gt;limit是在最后执行的，所以需要进行1000010次回表，然后把前1000000条数据抛弃，取后10条数据。&#xA;由此可见造成上述情况的罪魁祸首是&lt;code&gt;回表&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;可以通过子查询或覆盖索引来减少回表，根据业务来决定。&lt;/li&gt;&#xA;&lt;li&gt;order by和limit结合使用。&lt;/li&gt;&#xA;&lt;li&gt;主键直接定位(ID需有序)，分步查询/程序记录上一页最大主键ID。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Multi-Versioned Concurrency Control</title>
      <link>http://localhost:1313/posts/mysql/mysql-2/</link>
      <pubDate>Mon, 09 Sep 2024 17:52:19 +0000</pubDate>
      <guid>http://localhost:1313/posts/mysql/mysql-2/</guid>
      <description>&lt;p&gt;多版本并发控制，在事务开启时，构建Read View——逻辑上的一致性视图。&lt;/p&gt;&#xA;&lt;p&gt;通过行记录上的隐藏字段db_roll_ptr(指向undo)和db_trx_id(对该行记录最后操作的事务ID)，以及在创建事务的那一时刻，未提交但活跃的事务数来实现MVCC。&lt;/p&gt;&#xA;&lt;p&gt;事务创建时只需要新增对应的未提交但活跃的事务数组，最底位、最高位(事务id时递增的)，来实现秒级创建。db_roll_ptr维护了一个undo的链式结构，通过它可以找到对应时刻的行记录。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Overview of MySQL</title>
      <link>http://localhost:1313/posts/mysql/mysql-1/</link>
      <pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/mysql/mysql-1/</guid>
      <description>&lt;p&gt;从一条SQL语句的执行出发&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Server：连接-分析-优化-执行，重点是优化器&lt;/li&gt;&#xA;&lt;li&gt;执行器与InnDB的交互，索引下推&lt;/li&gt;&#xA;&lt;li&gt;B+Tree&lt;/li&gt;&#xA;&lt;li&gt;Buffer Pool&lt;/li&gt;&#xA;&lt;li&gt;log&lt;/li&gt;&#xA;&lt;li&gt;MVCC&lt;/li&gt;&#xA;&lt;li&gt;锁机制&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;从架构的角度看，Server+Engine，Server层看优化器的原理，执行器承担的是调用存储引擎接口，过滤组装的工作。&lt;br&gt;&#xA;由于InnoDB索引存储的特点，MySQL5.6支持索引下推，当命中联合索引时，将筛选过程下推至存储引擎，从而减轻执行器的压力。&lt;br&gt;&#xA;InnoDB对数据的操作都是在Buffer Pool中的，以页为单位与物理磁盘交互，构建出逻辑表空间，当在内存中对数据进行操作前，先记录undo log，完成后记录redo log，bin log，这涉及两阶段提交，当事务提交后，不管修改的页是否刷盘，理论上都能保证能够查到数据，但还要看redo log刷盘策略。&lt;br&gt;&#xA;MVCC的实现基于undo log和行记录的隐藏字段的，通过构建Read View来描述事务可见性。&lt;br&gt;&#xA;在更新或者当前读时，要求数据是最新的，因而需要锁机制：加锁的粒度、S｜X锁、MDL，最终是对索引加锁。&lt;/p&gt;&#xA;&lt;p&gt;这是我目前对MySQL全貌的认识，执行器、InnoDB层面都大量地使用了内存，对于Buffer Pool，redo log等日志分别对应了不同的刷盘策略；从SQL执行的过程来看优化，其实就是通过高效的索引模型，以最精简的结构返回数据，不要粗暴地把事情全部交给MySQL去做。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
